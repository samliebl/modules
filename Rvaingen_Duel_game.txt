written in Node.js using ESM (ECMAScript Modules) format, with modular design principles applied. The code is split into separate files for clarity and reusability—main game logic, type definitions, flavor text, and utility functions are all distinct modules. This version maintains the same gameplay as the Python version: players input their Rvaingen’s type, talent, and skill, face an opponent, and determine effectiveness based on type matchups, stats, and randomness. It’s designed to run via the command line using Node.js (e.g., node index.js).

---

Project Structure
rvaingen-duel/
├── index.js            // Main entry point
├── types.js           // Type definitions and matchups
├── flavor.js          // Flavor text for duel outcomes
└── utils.js           // Utility functions (input, randomness)

Prerequisites
Node.js installed (v14+ recommended for ESM support).
Run with node --experimental-modules index.js if using an older version, or ensure your package.json includes "type": "module".

---

types.js - Type Definitions and Matchups
// ESM module exporting Rvaingen types and their advantages
export const TYPES = ["Melancholia", "Frenzy", "Obsession"](#);

export const TYPEADVANTAGES = 
  Melancholia:  Frenzy: 2, Obsession: -2, Melancholia: 0 ,
  Frenzy:  Obsession: 2, Melancholia: -2, Frenzy: 0 ,
  Obsession:  Melancholia: 2, Frenzy: -2, Obsession: 0 ,
};

---

flavor.js - Flavor Text for Duel Outcomes
// ESM module exporting duel flavor text
export const DUELFLAVOR = 
  "Melancholia,Frenzy": "Shadows coil around the Frenzy Rvaingen’s chaos, smothering their light in gloom.",
  "Frenzy,Obsession": "Frenzy’s wild energy shatters the Obsession Rvaingen’s psychic chains.",
  "Obsession,Melancholia": "Obsession’s relentless focus pierces Melancholia’s veil of despair.",
  "Melancholia,Obsession": "Melancholia’s slowing shadows falter under Obsession’s unyielding grip.",
  "Frenzy,Melancholia": "Frenzy’s chaos surges, only to be dulled by Melancholia’s haunting stillness.",
  "Obsession,Frenzy": "Obsession’s bindings strain and snap against Frenzy’s relentless storm.",
};

export function getFlavor(attackerType, defenderType) 
  const key = $attackerType,$defenderType;
  return DUELFLAVOR[key](#)  $attackerType overwhelms $defenderType with haunted might.;
}

---

utils.js - Utility Functions
import readline from "node:readline/promises";
import  stdin as input, stdout as output  from "node:process";

// Create readline interface for command-line input
const rl = readline.createInterface( input, output );

// Random integer generator
export function getRandomInt(min, max) 
  return Math.floor(Math.random()  (max - min + 1)) + min;
}

// Async input function with validation
export async function getInput(prompt, validOptions = null) 
  while (true) 
const answer = await rl.question(prompt);
const trimmed = answer.trim();

if (!validOptions) return trimmed;

if (validOptions.includes(trimmed)) return trimmed;

if (/^d+$/.test(trimmed)) 
  const num = parseInt(trimmed, 10);
  if (validOptions.some((range) =\> range[0](#) \<= num && num \<= range[1](#))) return num;
}

console.log("Invalid input. Try again.");
  }
}

// Close readline interface
export function closeInput() 
  rl.close();
}

---

index.js - Main Game Logic
import  TYPES, TYPEADVANTAGES  from "./types.js";
import  getFlavor  from "./flavor.js";
import  getInput, getRandomInt, closeInput  from "./utils.js";

function calculateEffectiveness(attackerType, defenderType, attackerTalent, attackerSkill, defenderTalent, defenderSkill) 
  // Base advantage from type matchup
  const baseAdvantage = TYPEADVANTAGES[attackerType](#)[defenderType](#);

  // Talent boosts power, skill mitigates instability (halved for balance)
  const attackerPower = attackerTalent + Math.floor(attackerSkill / 2);
  const defenderPower = defenderTalent + Math.floor(defenderSkill / 2);

  // Random spark surge (1-5)
  const attackerSurge = getRandomInt(1, 5);
  const defenderSurge = getRandomInt(1, 5);

  // Total effectiveness score
  const attackerScore = baseAdvantage + attackerPower + attackerSurge;
  const defenderScore = defenderPower + defenderSurge;

  return [attackerScore, defenderScore](#);
}

async function main() 
  console.log("=== Rvaingen Duel ===");
  console.log("Test the might of the afflicted! Choose your Rvaingen and their foe.");
  console.log(Types: $TYPES.join(", "));

  // Player Rvaingen
  console.log("nYour Rvaingen:");
  const playerType = await getInput("Enter type (Melancholia/Frenzy/Obsession): ", TYPES);
  const playerTalent = await getInput("Enter talent (1-10): ", [[1, 10](#)]);
  const playerSkill = await getInput("Enter skill (1-10): ", [[1, 10](#)]);

  // Opponent Rvaingen
  console.log("nOpponent Rvaingen (leave blank for default):");
  const oppTypeInput = await getInput("Enter type (Melancholia/Frenzy/Obsession) or press Enter for random: ");
  const opponentType = TYPES.includes(oppTypeInput) ? oppTypeInput : TYPES[getRandomInt(0, TYPES.length - 1)](#);
  
  const oppTalentInput = await getInput("Enter talent (1-10) or press Enter for 5: ");
  const opponentTalent = /^d+$/.test(oppTalentInput) && oppTalentInput \>= 1 && oppTalentInput \<= 10 ? parseInt(oppTalentInput) : 5;
  
  const oppSkillInput = await getInput("Enter skill (1-10) or press Enter for 5: ");
  const opponentSkill = /^d+$/.test(oppSkillInput) && oppSkillInput \>= 1 && oppSkillInput \<= 10 ? parseInt(oppSkillInput) : 5;

  // Calculate effectiveness
  const [playerScore, opponentScore](#) = calculateEffectiveness(
playerType, opponentType, playerTalent, playerSkill, opponentTalent, opponentSkill
  );

  // Display outcome
  console.log("n=== Duel Outcome ===");
  console.log($playerType (Talent: $playerTalent, Skill: $playerSkill) vs $opponentType (Talent: $opponentTalent, Skill: $opponentSkill));
  console.log(Scores: $playerScore vs $opponentScore);

  if (playerScore \> opponentScore) 
const flavor = getFlavor(playerType, opponentType);
console.log(Victory! $flavor);
  } else if (playerScore \< opponentScore) 
const flavor = getFlavor(opponentType, playerType);
console.log(Defeat! $flavor);
  } else 
console.log("A draw! The Rvaingen’s powers clash in a haunted stalemate.");
  }

  closeInput();
}

main().catch((err) =\> 
  console.error("Error:", err);
  closeInput();
});

---

How to Run
Setup:
Create a folder (e.g., rvaingen-duel).
Add the four files (index.js, types.js, flavor.js, utils.js) as shown above.
Create a package.json with:

  "type": "module",
  "name": "rvaingen-duel",
  "version": "1.0.0"
}
Ensure Node.js is installed (v14+ recommended).

Run: Execute node index.js in the terminal from the project folder.

Play: Follow prompts to input your Rvaingen’s type, talent, and skill, then the opponent’s (or use defaults).

Example Run
=== Rvaingen Duel ===
Test the might of the afflicted! Choose your Rvaingen and their foe.
Types: Melancholia, Frenzy, Obsession

Your Rvaingen:
Enter type (Melancholia/Frenzy/Obsession): Frenzy
Enter talent (1-10): 8
Enter skill (1-10): 4

Opponent Rvaingen (leave blank for default):
Enter type (Melancholia/Frenzy/Obsession) or press Enter for random: Obsession
Enter talent (1-10) or press Enter for 5: 6
Enter skill (1-10) or press Enter for 5: 3

=== Duel Outcome ===
Frenzy (Talent: 8, Skill: 4) vs Obsession (Talent: 6, Skill: 3)
Scores: 15 vs 10
Victory! Frenzy’s wild energy shatters the Obsession Rvaingen’s psychic chains.

---

Modular Design Notes
types.js: Exports constants for types and matchups, reusable for expansion (e.g., adding "Anxiety").
flavor.js: Separates narrative text into a module, with a function to retrieve it, keeping index.js lean.
utils.js: Handles input and randomness, leveraging Node’s readline for async I/O, making it portable for other CLI games.
index.js: Orchestrates the game, importing from other modules, focusing on logic and flow.

Features
Same mechanics as the Python version: type advantages (+2/-2/0), talent/skill impact, random surge (1-5).
ESM format ensures modern JavaScript compatibility and modularity.
Error handling via .catch in main().

Expansion Ideas
Add a stability.js module to track psychological toll, reducing scores over multiple duels.
Extend types.js with more Rvaingen types and complex matchups.
Modularize scoring logic into a separate combat.js.

This Node.js version keeps the Rvaingen’s haunted essence alive in a playable format. Let me know if you’d like to refine it further—say, tweak scoring or add a new type!
